@page "/my"
@using MudBlazor
@using System.Linq
@using System.Collections.Generic
@using System.Text.Json
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.AspNetCore.Components.Rendering
@using Microsoft.AspNetCore.Identity
@using urfit_presence.Data
@inject IDbContextFactory<ApplicationDbContext> ctxf
@inject UserManager<ApplicationUser> userManager

@attribute [Authorize()]
<MudContainer Fixed="true">
    <MudExpansionPanels>
        <MudExpansionPanel Icon="@Icons.Material.Filled.Approval" Text="Moment">
            <TitleContent>
                <div class="d-flex">
                    <MudIcon Icon="@Icons.Material.Filled.Timelapse" class="mr-3"></MudIcon>
                    <MudText>Moment</MudText>
                    <MudText>&nbsp;</MudText>
                    <MudText>@_selectedTimeSlot</MudText>
                </div>
            </TitleContent>
            <ChildContent>
                <MudListExtended T="TimeSlot" ItemCollection="TimeSlots" Clickable="true" SelectedValue="_selectedTimeSlot" SelectedValueChanged="UpdateSelectedTimeSlot"/>
            </ChildContent>            
        </MudExpansionPanel>
        <MudExpansionPanel Icon="@Icons.Material.Filled.Approval" Text="Date">
            <TitleContent>
                <div class="d-flex">
                    <MudIcon Icon="@Icons.Material.Filled.DateRange" class="mr-3"></MudIcon>
                    <MudText>Date</MudText>
                    <MudText>&nbsp;</MudText>
                    @if (_selectedDate.HasValue)
                    {
                        <MudText>@DateOnly.FromDateTime(_selectedDate.Value).ToString("dddd dd MMM")</MudText>
                    }
                </div>
            </TitleContent>
            <ChildContent>
                <MudDatePicker PickerVariant="PickerVariant.Static" Color="Color.Secondary" Rounded="true" DateChanged="UpdateSelectedDate"/>
            </ChildContent>
        </MudExpansionPanel>
    </MudExpansionPanels>
    
    <MudPaper Class="pa-4 pl-6 mt-4">
        <div class="d-flex">
            <MudIcon Icon="@Icons.Material.Filled.People" class="mr-3"></MudIcon>
            <MudText>People for</MudText>
            <MudText>&nbsp;</MudText>
            @if (_selectedDate.HasValue)
            {
                <MudText>@DateOnly.FromDateTime(_selectedDate.Value).ToString("dddd dd MMM")</MudText>
                <MudText>&nbsp;</MudText>
            }
            <MudText>@_selectedTimeSlot?.StartTime</MudText>
            <MudText>&nbsp;</MudText>
            <MudText>@_presentPeople.Count() / @_availablePeople.Count</MudText>
        </div>
        
        <MudListExtended T="ApplicationUser" ItemCollection="_availablePeople" SelectedValues="_presentPeople" SelectedValuesChanged="UpdatePresentPeople" Clickable="true" MultiSelection="true" MultiSelectionComponent="MultiSelectionComponent.SwitchM3"/>
        <MudStack Row>
            <MudButton Color="Color.Success" StartIcon="@Icons.Material.Filled.Add" OnClick="AddPerson">Create User</MudButton>
        </MudStack>
    </MudPaper>

    <MudGrid Class="full-width">
        <MudItem xs="12">
            <MudDataGrid Items="@Presences" Groupable="true" GroupExpanded="false">
                <Columns>
                    <PropertyColumn Property="x => x.DateWithTimeSlotTime" Grouping/>
                    <PropertyColumn Property="x => x.ApplicationUser"/>
                    <PropertyColumn Property="x => x.TimeSlot"/>
                </Columns>
            </MudDataGrid>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private IEnumerable<ApplicationUser> _presentPeople = [];
    private List<ApplicationUser> _availablePeople = [];
    private List<TimeSlot> TimeSlots { get; set; } = [];
    private IEnumerable<ApplicationUser> People { get; set; } = [];
    private List<Presence> Presences { get; set; } = [];
    private TimeSlot? _selectedTimeSlot;
    private DateTime? _selectedDate;

    private async void UpdatePresentPeople(IEnumerable<ApplicationUser> pt)
    {
        if (_selectedDate is null || _selectedTimeSlot is null) return;
        
        var peopleToAdd = pt.Where(p => !_presentPeople.Any(pp => pp.Id == p.Id));
        var peopleToRemove = _presentPeople.Where(p => !pt.Any(pp => pp.Id == p.Id));
        
        await using var context = await ctxf.CreateDbContextAsync();
        foreach (var p in peopleToAdd)
        {
            var presence = new Presence
                           {
                               ApplicationUser = p, TimeSlot = _selectedTimeSlot, Date = DateOnly.FromDateTime(_selectedDate.Value)
                           };
            context.Attach(presence.TimeSlot);
            context.Attach(presence.ApplicationUser);
            context.Presences.Add(presence);
            Presences.Add(presence);
        }
        
        foreach (var p in peopleToRemove)
        {
            var presence = Presences.FirstOrDefault(pr => pr.ApplicationUser == p 
                                                          && pr.TimeSlot == _selectedTimeSlot 
                                                          && pr.Date == DateOnly.FromDateTime(_selectedDate.Value));
            context.Presences.Remove(presence);
            Presences.Remove(presence);            
        }

        await context.SaveChangesAsync();
        _presentPeople = pt;
    }

    
    
    private async void UpdateSelectedTimeSlot(TimeSlot? st)
    {
        if (st is null) return;
        _selectedTimeSlot = st;
        _selectedDate = GetClosestDayOfWeek(DateTime.Now, st.DayOfWeek);
        CheckDateTimeSlot();
    }

    private async void UpdateSelectedDate(DateTime? dt)
    {
        _selectedDate = dt;
        CheckDateTimeSlot();
    }
    
    private void CheckDateTimeSlot()
    {
        if (!_selectedDate.HasValue) return;
        if (_selectedTimeSlot is null) return;
        _presentPeople = Presences.Where(p => p.TimeSlot == _selectedTimeSlot && p.Date == DateOnly.FromDateTime(_selectedDate.Value)).Select(p => p.ApplicationUser).ToList();;
    }

    public static DateTime GetClosestDayOfWeek(DateTime date, DayOfWeek dayOfWeek)
    {
        // Calculate the difference from Monday
        int diffDayOfWeek = (int)dayOfWeek - (int)date.DayOfWeek;

        // If the difference is negative, it means the given date is after Monday in the week
        if (diffDayOfWeek < -3)
        {
            diffDayOfWeek += 7;
        }

        // If the difference is greater than 3, it means the given date is closer to the previous Monday
        if (diffDayOfWeek > 3)
        {
            diffDayOfWeek -= 7;
        }

        // Return the closest Monday
        return date.AddDays(diffDayOfWeek);
    }

    private bool firstRender = true;

    protected override async Task OnInitializedAsync()
    {
        if (!firstRender) return;
        await LoadData();
        firstRender = false;
    }

    
    private async Task LoadData()
    {
        var nearestTimeSlotId = 3;
        await using var context = await ctxf.CreateDbContextAsync();
        TimeSlots = await context.TimeSlots.ToListAsync();
        People = await userManager.GetUsersInRoleAsync("Bootcamper");
        Presences = await context.Presences
                                 .Include(p => p.TimeSlot)
                                 .OrderBy(p => p.Date)
                                 .ThenBy(p => p.TimeSlot.StartTime)
                                 .ToListAsync();
        _availablePeople = People.ToList();

        var monday = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek + (int)DayOfWeek.Monday);
        int amountOfRegistrations = 10; // * TimeSlots.Count(); // 10 weeks
        foreach (var ts in TimeSlots)
        {
            var startDate = monday;
            var dates = new List<DateOnly>();
            for (int i = 0; i < amountOfRegistrations; i++)
            {
                var f = GetClosestDayOfWeek(startDate, ts.DayOfWeek);
                dates.Add(DateOnly.FromDateTime(f));
                startDate = startDate.AddDays(7);
            }
            possibilities.Add(ts, dates);
        }

        var a = 'b';
    }



    Dictionary<TimeSlot, List<DateOnly>> possibilities = new();
    
    private string _newPerson;
    private async Task AddPerson()
    {

        var user = new ApplicationUser();
        user.UserName = "username";
        user.Email = "e@mai.l";
        user.EmailConfirmed = true;
        userManager.CreateAsync(user);
    }

    private async Task AddPresence(ApplicationUser p, TimeSlot t, DateOnly d)
    {
        if (_selectedTimeSlot is null || _presentPeople is null || _selectedDate is null)
        {
            return;
        }

        await using var context = await ctxf.CreateDbContextAsync();
        foreach (var _selectedPersonListItem in _presentPeople)
        {
            var _selectedPerson = _selectedPersonListItem; 
            context.Attach(_selectedPerson);
            context.Attach(_selectedTimeSlot);
            var presence = new Presence
                           {
                               ApplicationUser = _selectedPerson, TimeSlot = _selectedTimeSlot, Date = DateOnly.FromDateTime(_selectedDate.Value)
                           };
            context.Presences.Add(presence);
            Presences.Add(presence);
        }
        
        await context.SaveChangesAsync();
        // await LoadData();
    }

}